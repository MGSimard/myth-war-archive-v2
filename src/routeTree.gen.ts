/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorldRouteImport } from './routes/world'
import { Route as ToolsRouteImport } from './routes/tools'
import { Route as LoreRouteImport } from './routes/lore'
import { Route as GameHistoryRouteImport } from './routes/game-history'
import { Route as CommunitiesRouteImport } from './routes/communities'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GuidesRebirthRouteImport } from './routes/guides.rebirth'
import { Route as GuidesLevelingRouteImport } from './routes/guides.leveling'
import { Route as AssetsMapsRouteImport } from './routes/assets.maps'
import { Route as AssetsImagesRouteImport } from './routes/assets.images'
import { Route as AssetsAudioRouteImport } from './routes/assets.audio'

const WorldRoute = WorldRouteImport.update({
  id: '/world',
  path: '/world',
  getParentRoute: () => rootRouteImport,
} as any)
const ToolsRoute = ToolsRouteImport.update({
  id: '/tools',
  path: '/tools',
  getParentRoute: () => rootRouteImport,
} as any)
const LoreRoute = LoreRouteImport.update({
  id: '/lore',
  path: '/lore',
  getParentRoute: () => rootRouteImport,
} as any)
const GameHistoryRoute = GameHistoryRouteImport.update({
  id: '/game-history',
  path: '/game-history',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunitiesRoute = CommunitiesRouteImport.update({
  id: '/communities',
  path: '/communities',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GuidesRebirthRoute = GuidesRebirthRouteImport.update({
  id: '/guides/rebirth',
  path: '/guides/rebirth',
  getParentRoute: () => rootRouteImport,
} as any)
const GuidesLevelingRoute = GuidesLevelingRouteImport.update({
  id: '/guides/leveling',
  path: '/guides/leveling',
  getParentRoute: () => rootRouteImport,
} as any)
const AssetsMapsRoute = AssetsMapsRouteImport.update({
  id: '/assets/maps',
  path: '/assets/maps',
  getParentRoute: () => rootRouteImport,
} as any)
const AssetsImagesRoute = AssetsImagesRouteImport.update({
  id: '/assets/images',
  path: '/assets/images',
  getParentRoute: () => rootRouteImport,
} as any)
const AssetsAudioRoute = AssetsAudioRouteImport.update({
  id: '/assets/audio',
  path: '/assets/audio',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/communities': typeof CommunitiesRoute
  '/game-history': typeof GameHistoryRoute
  '/lore': typeof LoreRoute
  '/tools': typeof ToolsRoute
  '/world': typeof WorldRoute
  '/assets/audio': typeof AssetsAudioRoute
  '/assets/images': typeof AssetsImagesRoute
  '/assets/maps': typeof AssetsMapsRoute
  '/guides/leveling': typeof GuidesLevelingRoute
  '/guides/rebirth': typeof GuidesRebirthRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/communities': typeof CommunitiesRoute
  '/game-history': typeof GameHistoryRoute
  '/lore': typeof LoreRoute
  '/tools': typeof ToolsRoute
  '/world': typeof WorldRoute
  '/assets/audio': typeof AssetsAudioRoute
  '/assets/images': typeof AssetsImagesRoute
  '/assets/maps': typeof AssetsMapsRoute
  '/guides/leveling': typeof GuidesLevelingRoute
  '/guides/rebirth': typeof GuidesRebirthRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/communities': typeof CommunitiesRoute
  '/game-history': typeof GameHistoryRoute
  '/lore': typeof LoreRoute
  '/tools': typeof ToolsRoute
  '/world': typeof WorldRoute
  '/assets/audio': typeof AssetsAudioRoute
  '/assets/images': typeof AssetsImagesRoute
  '/assets/maps': typeof AssetsMapsRoute
  '/guides/leveling': typeof GuidesLevelingRoute
  '/guides/rebirth': typeof GuidesRebirthRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/communities'
    | '/game-history'
    | '/lore'
    | '/tools'
    | '/world'
    | '/assets/audio'
    | '/assets/images'
    | '/assets/maps'
    | '/guides/leveling'
    | '/guides/rebirth'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/communities'
    | '/game-history'
    | '/lore'
    | '/tools'
    | '/world'
    | '/assets/audio'
    | '/assets/images'
    | '/assets/maps'
    | '/guides/leveling'
    | '/guides/rebirth'
  id:
    | '__root__'
    | '/'
    | '/communities'
    | '/game-history'
    | '/lore'
    | '/tools'
    | '/world'
    | '/assets/audio'
    | '/assets/images'
    | '/assets/maps'
    | '/guides/leveling'
    | '/guides/rebirth'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CommunitiesRoute: typeof CommunitiesRoute
  GameHistoryRoute: typeof GameHistoryRoute
  LoreRoute: typeof LoreRoute
  ToolsRoute: typeof ToolsRoute
  WorldRoute: typeof WorldRoute
  AssetsAudioRoute: typeof AssetsAudioRoute
  AssetsImagesRoute: typeof AssetsImagesRoute
  AssetsMapsRoute: typeof AssetsMapsRoute
  GuidesLevelingRoute: typeof GuidesLevelingRoute
  GuidesRebirthRoute: typeof GuidesRebirthRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/world': {
      id: '/world'
      path: '/world'
      fullPath: '/world'
      preLoaderRoute: typeof WorldRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tools': {
      id: '/tools'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/lore': {
      id: '/lore'
      path: '/lore'
      fullPath: '/lore'
      preLoaderRoute: typeof LoreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game-history': {
      id: '/game-history'
      path: '/game-history'
      fullPath: '/game-history'
      preLoaderRoute: typeof GameHistoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/communities': {
      id: '/communities'
      path: '/communities'
      fullPath: '/communities'
      preLoaderRoute: typeof CommunitiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/guides/rebirth': {
      id: '/guides/rebirth'
      path: '/guides/rebirth'
      fullPath: '/guides/rebirth'
      preLoaderRoute: typeof GuidesRebirthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/guides/leveling': {
      id: '/guides/leveling'
      path: '/guides/leveling'
      fullPath: '/guides/leveling'
      preLoaderRoute: typeof GuidesLevelingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assets/maps': {
      id: '/assets/maps'
      path: '/assets/maps'
      fullPath: '/assets/maps'
      preLoaderRoute: typeof AssetsMapsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assets/images': {
      id: '/assets/images'
      path: '/assets/images'
      fullPath: '/assets/images'
      preLoaderRoute: typeof AssetsImagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assets/audio': {
      id: '/assets/audio'
      path: '/assets/audio'
      fullPath: '/assets/audio'
      preLoaderRoute: typeof AssetsAudioRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CommunitiesRoute: CommunitiesRoute,
  GameHistoryRoute: GameHistoryRoute,
  LoreRoute: LoreRoute,
  ToolsRoute: ToolsRoute,
  WorldRoute: WorldRoute,
  AssetsAudioRoute: AssetsAudioRoute,
  AssetsImagesRoute: AssetsImagesRoute,
  AssetsMapsRoute: AssetsMapsRoute,
  GuidesLevelingRoute: GuidesLevelingRoute,
  GuidesRebirthRoute: GuidesRebirthRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
